function [] = receiver_Disp(GPU)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Real-time fMRI receiver program
%   USAGE : receiver
% 
% Copyright 2013 All Rights Reserved.
% ATR Brain Information Communication Research Lab Group. 
% ------------------------------------------------------------------
% Toshinori YOSHIOKA
% 2-2-2 Hikaridai, Seika-cho, Sorakugun, Kyoto,
% 619-0288, Japan (Keihanna Science city)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% VTD edits (november 24th 2020):
%
% This is a modification of the neurofeedback.m file to conduct the 
% calibration and experiment using the same visual parameters as the 
% neurofeedback sessions. 
%
% Unlike the original code by ATR, there are now 3 instances:
% display(): which should be executed on the diplay computer for visual
%               presentation to the participant.
% receiver(): which collects and process the dcm images written down by the
%               scanner. This is executed on the processing computer.
% collector(): which collects the images processed by the receiver and run
%               the real-time computations. This is executed on the processing computer.
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%            few things to add to the MATLAB path
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fullpath = which( mfilename );
[my_path, my_name, extension] = fileparts(deblank(fullpath));
addpath( my_path );
addpath( fullfile(my_path, 'mfiles') );
addpath( fullfile(my_path, 'utility') );
addpath( fullfile(my_path, 'toolbox') );
addpath( fullfile(my_path, 'toolbox', 'msocket') );
if exist('spm', 'file') == 0
  spm_search_path = {...
      '~/neurofeedback/toolbox/spm12',...
      '~/Users/neurofeedback/toolbox/spm12' };
  for ii=1:length(spm_search_path)
      if exist(spm_search_path{ii}, 'dir')
          addpath(spm_search_path{ii});
          break;
      end
  end
end	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%       A function that initiates a lot of the variables.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
global gData
gData = create_global('receiver');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% displays the copyrights of the toolbox in the Matlab command window.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
copyright(gData.version);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%      Load the cached data generated by the collector
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
cache_data = cache_file(false);
% Version_check is just to make sure that the cache data fit with those you
% just generated with the create_global() above.
[err, war] = version_check(cache_data, gData.version,'neurofeedback', my_name);
if err,	return;	end

% Use the port and msocket_server_name defined in the cached data
if length(cache_data.msocket_port) == 1
  gData.para.msocket.port = cache_data.msocket_port;
end

if isfield(cache_data, 'msocket_server_name')
  gData.para.msocket.server_name = cache_data.msocket_server_name;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%              Initialize the msocket client
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
gData.para.msocket.sock = msocket(gData.define,gData.define.msocket.INITIALIZE_CLIENT, gData.para);

msocket_para = gData.para.msocket;	
receive_data = msocket(gData.define, gData.define.msocket.RECEIVE_DATA, gData.para, [], -1.0);
receive_data
class(receive_data)
class(receive_data{1})
gData.para = receive_data{1}.para;	
gData.data = receive_data{1}.data;	
gData.para.msocket = msocket_para;	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                         receiver ID
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
gData.version.decnef.receiver_id =find(receive_data{1}.para.msocket.port == msocket_para.port);
fprintf('receiver ID = %d\n', gData.version.decnef.receiver_id);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Initialize the Batch system of SPM and load the MNI transformation. 
% This was achieved by splitting the spm_deformations() function
% into the spm_get_trans() and spm_realtime_deformations()
% which is called in the process_image_GPU()
% The idea is to do what can be achieved before the real-time procedure
% right now.
% -VTD-
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
spm('defaults','fmri');
spm_jobman('initcfg');
spm_get_defaults('cmdline',true)

MNI_trans_fname = fullfile(gData.para.files.templ_image_dir,gData.para.files.MNI_trans_fname);

defs.comp{1}.def         = {MNI_trans_fname};
defs.out{1}.pull.fnames  = {''};
defs.comp{2}.idbbvox.vox = [2 2 2];
defs.comp{2}.idbbvox.bb  = [-78 -112 -70
                          78 76 85];
defs.out{1}.pull.savedir.savesrc = 1;
defs.out{1}.pull.interp  = 4;
defs.out{1}.pull.mask    = 1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Important: you can define the smoothing here (currently 0)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
defs.out{1}.pull.fwhm    = [0 0 0];
defs.out{1}.pull.prefix  = 'w';

DefNii = nifti(defs.comp{1}.def);
vx  = sqrt(sum(DefNii.mat(1:3,1:3).^2));
if det(DefNii.mat(1:3,1:3))<0, vx(1) = -vx(1); end

o   = DefNii.mat\[0 0 0 1]';
o   = o(1:3)';
dm  = size(DefNii.dat);
bb  = [-vx.*(o-1) ; vx.*(dm(1:3)-o)];

outDir = gData.para.files.work_dir{gData.version.decnef.receiver_id};

defs.comp{2}.idbbvox.vox(~isfinite(defs.comp{2}.idbbvox.vox)) = vx(~isfinite(defs.comp{2}.idbbvox.vox));
defs.comp{2}.idbbvox.bb(~isfinite(defs.comp{2}.idbbvox.bb)) = bb(~isfinite(defs.comp{2}.idbbvox.bb));
[Def, mat] = spm_get_trans(defs,DefNii,outDir); 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%           Wait for the start signal from the collector
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

command = msocket(gData.define,gData.define.msocket.RECEIVE_DATA, gData.para, [], -1.0);
if command{1} == gData.define.command.SCAN_START	
  gData.data.live_flag = true;	
else
  gData.data.live_flag = false;	
end

% Get start time
if gData.para.feedback.io_tool == gData.define.feedback.io_tool.PSYCHTOOLBOX
  gData.data.start_time = GetSecs;
else					
  gData.data.start_time = tic;
end

% This is to set the scan number to start at.
% pre_trial_scan_num is essentially the number of TRs to skip.
% the receiver ID is to make sure that Receiver 2 will not start with the
% first TR.
scan = gData.para.scans.pre_trial_scan_num + gData.version.decnef.receiver_id;
time = 0.0;

gData.data.receiver_template = gData.data.receiver;

TR_Test = 1;
AllProccTime = [];
AllTime = [];
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%          Process images as soon as they are available
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

while gData.data.live_flag
  if scan <= gData.para.scans.total_scan_num

    if GPU % This is to use the GPU implementation 
	    [success, gData.data.receiver, dicom_fname,processTime] =...
	    process_image_GPU(gData.version, gData.define, gData.para, gData.data,...
	    scan, gData.version.decnef.receiver_id,gData.data.receiver,Def,mat,defs,DefNii,outDir);

    else % This is to use the normal pipeline
	     [success, gData.data.receiver, dicom_fname,processTime] =...
	     process_image(gData.version, gData.define, gData.para, gData.data,...
	     scan, gData.version.decnef.receiver_id,gData.data.receiver);
    end
    

    if success
      % send out the data
      msocket(gData.define, gData.define.msocket.SEND_DATA, gData.para, gData.data.receiver);
      
      %[gData.para, gData.data] =set_receiver_data(gData.para, gData.data, gData.data.receiver);
      
      % Compute dtime which is the processing time including the
      % transmission time to the collector (as opposed to processTime,
      % which includes only the processing of the image) 
      old_time = time;
      if gData.para.feedback.io_tool ==gData.define.feedback.io_tool.PSYCHTOOLBOX
            time = GetSecs - gData.data.start_time;
      else
            time = toc(gData.data.start_time);
      end
      dtime = time-old_time;

      % Display some useful information: processing time, dtime= time taken
      % for this image (including transmission)
      fprintf('\nscan%3d (''%s'') : dtime=%6.3f Process time =%6.3f time=%8.3f (sec)\n',...
	  scan, dicom_fname, dtime, processTime, time);

      % save these two values to make statistics later on.
      AllProccTime = [AllProccTime; processTime];
      AllTime = [AllTime; dtime];


      % This is to display the correlation with the template
      corr_roi_template = gData.data.receiver.corr_roi_template;          

      tmp1 = sprintf('R%d=%.3f, ',[1:gData.data.roi_num; corr_roi_template]);
      if sum( corr_roi_template < gData.para.score.corr_roi_template_threshold )
        tmp2 = 'NG';	
      else
        tmp2 = 'OK';	
      end
      fprintf('corr ROI template(%s) : %s\n', tmp1(1:end-2), tmp2);
      
      % Update the scan value which will now correspond to the next image
      % we will be looking for.
      scan = scan + gData.para.receiver_num;
    else	
      % Dislay a start if the image was not there yet.
      fprintf('*');
      pause(5/100);
    end
  end

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % Check if we receive data from the collector such as a quit signal.
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  command = msocket(gData.define, gData.define.msocket.RECEIVE_DATA,gData.para, [], gData.define.msocket.TIMEOUT);
  if length(command{1})
      if command{1} == gData.define.command.QUIT || command{1} == gData.define.command.FINISH	
          gData.data.live_flag = false;	
      else
          fprintf('unknown command : ''%d''\n', command{1});
      end
  end
end	


% Save the variable with the processing time
if GPU
    save([gData.para.files.roi_dir,'/ProcessingTime_GPU_Receiver_',num2str(gData.version.decnef.receiver_id),'.mat'],'AllProccTime','AllTime');
else
    save([gData.para.files.roi_dir,'/ProcessingTime_NoGPU_Receiver_',num2str(gData.version.decnef.receiver_id),'.mat'],'AllProccTime','AllTime');
end

  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                    Finish the communication
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
msocket(gData.define, gData.define.msocket.FINISH, gData.para);


function [err, war] = version_check(neb_ver, rcv_ver, neurofeedback, receiver)
% This function will compare the version values obtained in the cache from
% those obtained from the creat_golbal() function here. This is to make
% sure that the versions match.

% [input argument]
% neb_ver :
% rcv_ver : 
% neurofeedback : 
% receiver      : 
% 
% [output argument]
% err : 
% war : 

err = false;	
war = false;	
msg = '';	


if neb_ver.decnef_project ~= rcv_ver.decnef.project || neb_ver.decnef_release ~= rcv_ver.decnef.release

  msg = sprintf('%sERROR ''DECNEF_PROJECT'' is illegal value.\n', msg);
  msg = sprintf('%s   %s : DecNef%02d (r%d)\n',...
      msg, neurofeedback, neb_ver.decnef_project,...
      neb_ver.decnef_release);
  msg = sprintf('%s   %s : DecNef%02d (r%d)\n',...
      msg, receiver, rcv_ver.decnef.project,rcv_ver.decnef.release);
  err = true;	
end


if ~strcmp(neb_ver.spm_version, rcv_ver.spm.version) || neb_ver.spm_release ~= rcv_ver.spm.release

  if length(msg),	msg = sprintf('%s\n', msg);	end
  msg = sprintf('%sWARNING ''SPM_VERSION'' is miss match.\n', msg);
  msg = sprintf('%s   %s : %s (v%d)\n',...
      msg, neurofeedback,...
      neb_ver.spm_version, neb_ver.spm_release);
  msg = sprintf('%s   %s : %s (v%d)\n',...
      msg, receiver, rcv_ver.spm.version, rcv_ver.spm.release);
  war = true;
end

if err		
  fprintf(msg);
  waitfor( errordlg(msg, 'Error Dialog', 'modal') );
elseif war	
  fprintf(msg);
  waitfor( warndlg(msg, 'Warning Dialog', 'modal') );
end

